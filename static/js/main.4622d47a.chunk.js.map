{"version":3,"sources":["components/card/card.component.jsx","components/card-lists/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAEaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,6BAAKN,EAAMI,QAAQG,YCJlBC,EAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCN1BM,G,MAAY,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACrC,OACI,8BACI,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAWF,QCoCRG,G,wDArCb,aAAe,IAAD,8BACZ,gBAYFH,aAAe,SAACI,GACd,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SAbtB,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJL,E,qDAOd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAQ3C,WAAU,IAAD,EAE2BC,KAAKN,MAA/Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAClD,OACI,sBAAK9B,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA/BVI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4622d47a.chunk.js","sourcesContent":["import './card.styles.css'\n\nexport const Card = props => {\n    return (\n        <div className='card-container'>\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n            <h3>{props.monster.name}</h3>\n            <h3>{props.monster.email}</h3>            \n        </div>\n\n    )\n}","import './card-list.styles.css';\nimport { Card } from '../card/card.component'\n\nexport const CardList = props => {\n    return (\n        <div className='card-list'>\n            {\n                props.monsters.map(monster => (\n                    <Card key={monster.id} monster={monster}/>\n                ))\n            }\n        </div>\n    )\n}","import './search-box.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange}) => {\n    return (\n        <div>\n            <input \n            className='search'\n            type='search' \n            placeholder={ placeholder }\n            onChange={ handleChange } \n            />\n        </div>\n    )\n}","import React, { Component } from 'react'\n\nimport { CardList } from './components/card-lists/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n      this.state = {\n        monsters: [],\n        searchField: ''\n      }\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users}))\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      searchField: e.target.value\n    })\n  }\n  render() {\n\n    const { monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n        <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n        </div>\n    )\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}